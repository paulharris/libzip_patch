=== modified file 'libzip/lib/zip_close.c'
--- libzip/lib/zip_close.c	2012-01-09 03:18:36 +0000
+++ libzip/lib/zip_close.c	2012-01-10 06:29:05 +0000
@@ -580,7 +580,8 @@
 int
 _zip_changed(struct zip *za, int *survivorsp)
 {
-    int changed, i, survivors;
+    int changed, survivors;
+    zip_uint64_t i;
 
     changed = survivors = 0;
 

=== modified file 'libzip/lib/zip_free.c'
--- libzip/lib/zip_free.c	2012-01-09 03:18:36 +0000
+++ libzip/lib/zip_free.c	2012-01-10 06:34:59 +0000
@@ -46,7 +46,8 @@
 void
 _zip_free(struct zip *za)
 {
-    int i;
+    zip_uint64_t i;
+    int j;
 
     if (za == NULL)
 	return;
@@ -68,10 +69,10 @@
 	free(za->entry);
     }
 
-    for (i=0; i<za->nfile; i++) {
-	if (za->file[i]->error.zip_err == ZIP_ER_OK) {
-	    _zip_error_set(&za->file[i]->error, ZIP_ER_ZIPCLOSED, 0);
-	    za->file[i]->za = NULL;
+    for (j=0; j<za->nfile; j++) {
+	if (za->file[j]->error.zip_err == ZIP_ER_OK) {
+	    _zip_error_set(&za->file[j]->error, ZIP_ER_ZIPCLOSED, 0);
+	    za->file[j]->za = NULL;
 	}
     }
 

=== modified file 'libzip/lib/zip_source_filep.c'
--- libzip/lib/zip_source_filep.c	2012-01-09 03:18:36 +0000
+++ libzip/lib/zip_source_filep.c	2012-01-10 06:30:51 +0000
@@ -125,7 +125,8 @@
 {
     struct read_file *z;
     char *buf;
-    int i, n;
+    zip_int64_t i;
+    int n;
 
     z = (struct read_file *)state;
     buf = (char *)data;

=== modified file 'libzip/lib/zip_source_zip.c'
--- libzip/lib/zip_source_zip.c	2012-01-09 03:18:36 +0000
+++ libzip/lib/zip_source_zip.c	2012-01-10 06:24:55 +0000
@@ -121,7 +121,7 @@
 {
     struct read_zip *z;
     char b[8192], *buf;
-    int i;
+    zip_int64_t i;
     zip_uint64_t n;
 
     z = (struct read_zip *)state;

=== modified file 'libzip/lib/zip_unchange_all.c'
--- libzip/lib/zip_unchange_all.c	2012-01-09 03:18:36 +0000
+++ libzip/lib/zip_unchange_all.c	2012-01-10 06:36:14 +0000
@@ -42,7 +42,8 @@
 ZIP_EXTERN int
 zip_unchange_all(struct zip *za)
 {
-    int ret, i;
+    zip_uint64_t i;
+    int ret;
 
     ret = 0;
     for (i=0; i<za->nentry; i++)

